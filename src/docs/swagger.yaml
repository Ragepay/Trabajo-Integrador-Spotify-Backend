openapi: 3.0.3
info:
  title: Spotify Backend API
  description: |
    API REST para plataforma de streaming musical estilo Spotify.
    
    ## Características principales:
    - Gestión completa de usuarios, artistas, álbumes y canciones
    - Sistema de playlists con soft-delete
    - Manejo de suscripciones y pagos
    - Vistas avanzadas con JOINs complejos
    - Validaciones exhaustivas y manejo de errores
    
    ## Ejercicios adicionales:
    - **Vistas con JOINs**: Consultas complejas para análisis de datos
    - **Canciones populares por país**: Análisis de reproducciones por ubicación geográfica
    - **Ingresos por artista/discográfica**: Análisis financiero detallado
    
    ## Autenticación:
    Algunos endpoints pueden requerir autenticación JWT (implementación opcional).
    
  version: 1.0.0
  contact:
    name: Proyecto Integrador UNTreF
    email: estudiante@untref.edu.ar
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:9000/api/v1
    description: Servidor de desarrollo local (selecciona este en Swagger UI)

tags:
  - name: Usuarios
    description: Gestión de usuarios y autenticación
  - name: Artistas
    description: Gestión de artistas
  - name: Álbumes
    description: Gestión de álbumes musicales
  - name: Canciones
    description: Gestión de canciones y géneros
  - name: Géneros
    description: Gestión de géneros musicales
  - name: Playlists
    description: Gestión de playlists de usuarios
  - name: Suscripciones
    description: Gestión de suscripciones de usuarios
  - name: Métodos de Pago
    description: Gestión de métodos de pago
  - name: Pagos
    description: Gestión de pagos y facturación
  - name: Vistas Avanzadas
    description: Consultas complejas con JOINs (Ejercicios adicionales)

paths:
  # ==================== USUARIOS ====================
  /usuarios:
    get:
      tags: [Usuarios]
      summary: Listar usuarios
      description: Obtiene una lista paginada de usuarios (sin password_hash)
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
      responses:
        '200':
          description: Lista de usuarios obtenida exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  usuarios:
                    type: array
                    items:
                      $ref: '#/components/schemas/UsuarioResponse'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
    
    post:
      tags: [Usuarios]
      summary: Crear usuario
      description: Crea un nuevo usuario con validaciones
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsuarioCreate'
      responses:
        '201':
          description: Usuario creado exitosamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /usuarios/{id}:
    get:
      tags: [Usuarios]
      summary: Obtener usuario por ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Usuarios]
      summary: Actualizar usuario
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/UsuarioUpdate' }
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UsuarioUpdateResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    delete:
      tags: [Usuarios]
      summary: Eliminación lógica de usuario
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Usuario eliminado (borrado lógico)
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UsuarioDeletedResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /usuarios/password-vencidas:
    get:
      tags: [Usuarios]
      summary: Usuarios con contraseña vencida
      description: Lista usuarios con contraseña no actualizada en más de 90 días
      responses:
        '200':
          description: Lista de usuarios con contraseña vencida
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UsuarioResponse'

  # ==================== VISTAS AVANZADAS (EJERCICIOS) ====================
  /vistas/canciones-populares-por-pais:
    get:
      tags: [Vistas Avanzadas]
      summary: 'EJERCICIO 1: Canciones populares por país'
      description: |
        **Ejercicio de JOINs complejos**: Obtiene las canciones más reproducidas 
        agrupadas por país de origen de los usuarios.
        
        **JOINs utilizados**: 
        cancion → album → artista, playlist_cancion → playlist → usuario → pais
        
        **Agregaciones**: SUM(reproducciones), COUNT(playlists)
      parameters:
        - name: pais
          in: query
          description: Filtrar por país específico
          schema:
            type: string
            example: Argentina
        - name: limit
          in: query
          description: Límite de resultados
          schema:
            type: integer
            default: 50
            minimum: 1
        - name: orden
          in: query
          description: Campo de ordenamiento
          schema:
            type: string
            enum: [reproducciones, apariciones]
            default: reproducciones
      responses:
        '200':
          description: Datos de canciones populares por país
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CancionPopularPorPais'
        '400':
          $ref: '#/components/responses/BadRequest'

  /vistas/ingresos-por-artista-discografica:
    get:
      tags: [Vistas Avanzadas]
      summary: 'EJERCICIO 2: Ingresos por artista y discográfica'
      description: |
        **Ejercicio de JOINs complejos**: Analiza los ingresos generados por cada 
        combinación artista-discográfica con estadísticas detalladas.
        
        **JOINs utilizados**: 
        pago → suscripcion → usuario → playlist → playlist_cancion → cancion → album → artista/discografica → pais
        
        **Agregaciones**: SUM(ingresos), COUNT(suscripciones), AVG(reproducciones)
      parameters:
        - name: pais
          in: query
          description: Filtrar por país de la discográfica
          schema:
            type: string
            example: Argentina
        - name: minimo_ingresos
          in: query
          description: Filtrar por monto mínimo de ingresos
          schema:
            type: number
            minimum: 0
        - name: orden
          in: query
          description: Campo de ordenamiento
          schema:
            type: string
            enum: [ingresos, suscripciones, canciones]
            default: ingresos
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Datos de ingresos por artista y discográfica
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/IngresoPorArtistaDiscografica'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'

  # ==================== ARTISTAS ====================
  /artistas:
    get:
      tags: [Artistas]
      summary: Listar artistas
      parameters:
        - name: page
          in: query
          schema: { type: integer, default: 1, minimum: 1 }
        - name: limit
          in: query
          schema: { type: integer, default: 20, minimum: 1, maximum: 100 }
      responses:
        '200':
          description: Artistas encontrados
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje: { type: string }
                  page: { type: integer }
                  limit: { type: integer }
                  total: { type: integer }
                  totalPages: { type: integer }
                  artistas:
                    type: array
                    items: { $ref: '#/components/schemas/ArtistaResponse' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [Artistas]
      summary: Crear artista
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/ArtistaCreate' }
      responses:
        '201':
          description: Artista creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ArtistaCreateResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /artistas/{id}:
    get:
      tags: [Artistas]
      summary: Obtener artista por ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Artista encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ArtistaGetResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  # ==================== ÁLBUMES ====================
  /albumes:
    get:
      tags: [Álbumes]
      summary: Listar álbumes (opcional filtrar por artista)
      parameters:
        - name: artistaId
          in: query
          schema: { type: integer }
      responses:
        '200':
          description: Álbumes obtenidos
          content:
            application/json:
              schema:
                type: object
                properties:
                  artista:
                    oneOf:
                      - $ref: '#/components/schemas/ArtistaResponse'
                      - type: 'null'
                  albumes:
                    type: array
                    items: { $ref: '#/components/schemas/AlbumResponse' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [Álbumes]
      summary: Crear álbum
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AlbumCreate' }
      responses:
        '201':
          description: Álbum creado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AlbumCreateResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /albumes/{id}:
    get:
      tags: [Álbumes]
      summary: Obtener álbum por ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Álbum encontrado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AlbumGetResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /albumes/{id}/canciones:
    get:
      tags: [Álbumes]
      summary: Listar canciones de un álbum
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Canciones del álbum
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AlbumSongsResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  # ==================== CANCIONES ====================
  /canciones:
    get:
      tags: [Canciones]
      summary: Listar canciones (un único filtro permitido)
      description: "Filtros válidos (solo uno): genero (string), artistaId (int), albumId (int)"
      parameters:
        - name: genero
          in: query
          schema: { type: string }
        - name: artistaId
          in: query
          schema: { type: integer }
        - name: albumId
          in: query
          schema: { type: integer }
      responses:
        '200':
          description: Canciones encontradas
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CancionesListResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [Canciones]
      summary: Crear canción
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CancionCreate' }
      responses:
        '201':
          description: Canción creada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CancionCreateResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /canciones/{id}:
    get:
      tags: [Canciones]
      summary: Obtener canción por ID (incluye álbum, artista y géneros)
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Canción encontrada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CancionDetalleResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    put:
      tags: [Canciones]
      summary: Actualizar canción
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/CancionUpdate' }
      responses:
        '200':
          description: Canción actualizada
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CancionUpdateResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /canciones/{id}/generos:
    post:
      tags: [Canciones]
      summary: Asociar género a canción
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/GeneroAsociar' }
      responses:
        '201':
          description: Género asociado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CancionGeneroAsociadoResponse' }
        '400': { $ref: '#/components/responses/BadRequest' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  /canciones/{id}/generos/{idGenero}:
    delete:
      tags: [Canciones]
      summary: Desasociar género de canción
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
        - name: idGenero
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Género desasociado
          content:
            application/json:
              schema: { $ref: '#/components/schemas/CancionGeneroDesasociadoResponse' }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  # ==================== GÉNEROS ====================
  /generos:
    get:
      tags: [Géneros]
      summary: Listar géneros
      responses:
        '200':
          description: Géneros obtenidos
          content:
            application/json:
              schema: { $ref: '#/components/schemas/GenerosListResponse' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  # ==================== SUSCRIPCIONES ====================
  /suscripciones:
    get:
      tags: [Suscripciones]
      summary: Listar suscripciones
      responses:
        '200':
          description: Suscripciones obtenidas
          content:
            application/json:
              schema: { $ref: '#/components/schemas/SuscripcionesListResponse' }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [Suscripciones]
      summary: Crear suscripción
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/SuscripcionCreate' }
      responses:
        '201': { description: Suscripción creada, content: { application/json: { schema: { $ref: '#/components/schemas/SuscripcionCreateResponse' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }
  /suscripciones/{id}:
    get:
      tags: [Suscripciones]
      summary: Obtener suscripción por ID
      parameters:
        - name: id
          in: path
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Suscripción encontrada, content: { application/json: { schema: { $ref: '#/components/schemas/SuscripcionGetResponse' } } } }
        '404': { $ref: '#/components/responses/NotFound' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  # ==================== MÉTODOS DE PAGO ====================
  /metodos-pago:
    get:
      tags: [Métodos de Pago]
      summary: Listar métodos de pago (opcional filtrar por usuarioId)
      parameters:
        - name: usuarioId
          in: query
          schema: { type: integer }
      responses:
        '200': { description: Métodos obtenidos, content: { application/json: { schema: { $ref: '#/components/schemas/MetodosPagoListResponse' } } } }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [Métodos de Pago]
      summary: Crear método de pago
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MetodoPagoCreate' }
      responses:
        '201': { description: Método de pago creado, content: { application/json: { schema: { $ref: '#/components/schemas/MetodoPagoCreateResponse' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }

  # ==================== PAGOS ====================
  /pagos:
    get:
      tags: [Pagos]
      summary: Listar pagos con filtros opcionales
      parameters:
        - name: usuarioId
          in: query
          schema: { type: integer }
        - name: desde
          in: query
          schema: { type: string, format: date }
        - name: hasta
          in: query
          schema: { type: string, format: date }
      responses:
        '200': { description: Pagos obtenidos, content: { application/json: { schema: { $ref: '#/components/schemas/PagosListResponse' } } } }
        '500': { $ref: '#/components/responses/InternalServerError' }
    post:
      tags: [Pagos]
      summary: Registrar pago
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PagoCreate' }
      responses:
        '201': { description: Pago registrado, content: { application/json: { schema: { $ref: '#/components/schemas/PagoCreateResponse' } } } }
        '400': { $ref: '#/components/responses/BadRequest' }
        '500': { $ref: '#/components/responses/InternalServerError' }


components:
  schemas:
    # ==================== SCHEMAS BÁSICOS ====================
    UsuarioCreate:
      type: object
      required: [usuario, nombreCompleto, email, password]
      properties:
        usuario: { type: string, example: anagarcia }
        nombreCompleto: { type: string, example: Ana Garcia }
        email: { type: string, format: email, example: ana.garcia@example.com }
        password: { type: string, minLength: 8, example: Secr3t0! }
        fecha_nacimiento: { type: string, format: date, example: '1995-05-20' }
        sexo: { type: string, enum: [M, F], example: F }
        codigo_postal: { type: string, example: '4600' }
        id_pais: { type: integer, example: 1 }
        tipo_usuario: { type: integer, example: 2 }

    UsuarioResponse:
      type: object
      properties:
        id_usuario: { type: integer, example: 1 }
        usuario: { type: string, example: anagarcia }
        nombreCompleto: { type: string, example: Ana Garcia }
        email: { type: string, example: ana.garcia@example.com }
        fecha_nacimiento: { type: string, format: date }
        sexo: { type: string, enum: [M, F] }
        codigo_postal: { type: string }
        id_pais: { type: integer }
        tipo_usuario: { type: integer }
        fecha_modificacion_pass: { type: string, format: date-time }
        activo: { type: boolean }
        fecha_creacion: { type: string, format: date-time }
    UsuarioUpdate:
      type: object
      properties:
        usuario: { type: string }
        nombreCompleto: { type: string }
        email: { type: string }
        password: { type: string }
        fecha_nacimiento: { type: string, format: date }
        sexo: { type: string, enum: [M, F] }
        codigo_postal: { type: string }
        id_pais: { type: integer }
        tipo_usuario: { type: integer }

    UsuarioUpdateResponse:
      type: object
      properties:
        mensaje: { type: string, example: Usuario actualizado correctamente. }
        usuario: { $ref: '#/components/schemas/UsuarioResponse' }

    UsuarioDeletedResponse:
      type: object
      properties:
        mensaje: { type: string, example: Usuario eliminado con Borrado Lógico correctamente. }

    ArtistaResponse:
      type: object
      properties:
        id_artista: { type: integer, example: 1 }
        nombre: { type: string, example: Fito Páez }

    ArtistaCreate:
      type: object
      required: [nombre]
      properties:
        nombre: { type: string, example: Fito Páez }

    ArtistaCreateResponse:
      type: object
      properties:
        mensaje: { type: string, example: Artista creado correctamente. }
        artista: { $ref: '#/components/schemas/ArtistaResponse' }

    ArtistaGetResponse:
      type: object
      properties:
        mensaje: { type: string }
        artista: { $ref: '#/components/schemas/ArtistaResponse' }

    AlbumResponse:
      type: object
      properties:
        id_album: { type: integer, example: 10 }
        titulo: { type: string, example: El Amor Después Del Amor }
        id_artista: { type: integer, example: 1 }

    AlbumCreate:
      type: object
      required: [titulo, id_artista]
      properties:
        titulo: { type: string, example: El Amor Después Del Amor }
        id_artista: { type: integer, example: 1 }

    AlbumCreateResponse:
      type: object
      properties:
        mensaje: { type: string, example: Álbum creado correctamente. }
        nuevoAlbum: { $ref: '#/components/schemas/AlbumResponse' }

    AlbumGetResponse:
      type: object
      properties:
        mensaje: { type: string }
        album: { $ref: '#/components/schemas/AlbumResponse' }

    AlbumSongsResponse:
      type: object
      properties:
        mensaje: { type: string }
        album: { type: string, example: El Amor Después Del Amor }
        canciones:
          type: array
          items: { $ref: '#/components/schemas/CancionResponse' }

    CancionResponse:
      type: object
      properties:
        id_cancion: { type: integer, example: 100 }
        titulo: { type: string, example: Mariposa Tecknicolor }
        duracion: { type: integer, example: 215 }
        id_album: { type: integer, nullable: true, example: 10 }
        reproducciones: { type: integer, example: 1500 }
        likes: { type: integer, example: 250 }

    CancionCreate:
      type: object
      required: [titulo]
      properties:
        titulo: { type: string }
        duracion: { type: integer, example: 215 }
        id_album: { type: integer, nullable: true }
        reproducciones: { type: integer, example: 0 }
        likes: { type: integer, example: 0 }

    CancionCreateResponse:
      type: object
      properties:
        mensaje: { type: string }
        nuevaCancion: { $ref: '#/components/schemas/CancionResponse' }

    CancionDetalleResponse:
      type: object
      properties:
        mensaje: { type: string }
        cancion:
          allOf:
            - $ref: '#/components/schemas/CancionResponse'
            - type: object
              properties:
                album:
                  type: object
                  properties:
                    id_album: { type: integer }
                    titulo: { type: string }
                    artista:
                      type: object
                      properties:
                        id_artista: { type: integer }
                        nombre: { type: string }
                generos:
                  type: array
                  items: { $ref: '#/components/schemas/GeneroResponse' }

    CancionUpdate:
      type: object
      properties:
        titulo: { type: string }
        duracion: { type: integer }
        id_album: { type: integer }
        reproducciones: { type: integer }
        likes: { type: integer }

    CancionUpdateResponse:
      type: object
      properties:
        mensaje: { type: string }
        cancion: { $ref: '#/components/schemas/CancionResponse' }

    GeneroResponse:
      type: object
      properties:
        id_genero: { type: integer, example: 5 }
        nombre: { type: string, example: Rock }

    GenerosListResponse:
      type: object
      properties:
        mensaje: { type: string }
        generos:
          type: array
          items: { $ref: '#/components/schemas/GeneroResponse' }

    GeneroCreate:
      type: object
      required: [nombre]
      properties:
        nombre: { type: string, example: Rock }

    GeneroCreateResponse:
      type: object
      properties:
        mensaje: { type: string }
        genero: { $ref: '#/components/schemas/GeneroResponse' }

    GeneroAsociar:
      type: object
      required: [id_genero]
      properties:
        id_genero: { type: integer, example: 5 }

    CancionGeneroAsociadoResponse:
      type: object
      properties:
        message: { type: string, example: Género asociado exitosamente. }
        id_cancion: { type: integer }
        generoAsociado: { type: integer }

    CancionGeneroDesasociadoResponse:
      type: object
      properties:
        mensaje: { type: string, example: Género desasociado exitosamente. }
        generoDesasociado: { type: integer }

    # ==================== SCHEMAS PARA EJERCICIOS ====================
    CancionPopularPorPais:
      type: object
      description: Resultado del EJERCICIO 1 - Canciones populares por país
      properties:
        nombre_cancion:
          type: string
          example: Mariposa Tecknicolor
        nombre_artista:
          type: string
          example: Fito Páez
        nombre_album:
          type: string
          example: El Amor Después Del Amor
        nombre_pais:
          type: string
          example: Argentina
        total_reproducciones:
          type: integer
          example: 1500000
          description: Suma total de reproducciones de la canción
        apariciones_en_playlists:
          type: integer
          example: 245
          description: Número de playlists activas que contienen esta canción

    IngresoPorArtistaDiscografica:
      type: object
      description: Resultado del EJERCICIO 2 - Ingresos por artista y discográfica
      properties:
        nombre_artista:
          type: string
          example: Fito Páez
        nombre_discografica:
          type: string
          example: Sony Music Argentina
        nombre_pais_discografica:
          type: string
          example: Argentina
        total_ingresos:
          type: number
          format: decimal
          example: 2547.85
          description: Suma total de ingresos generados
        cantidad_suscripciones_activas:
          type: integer
          example: 127
          description: Número de suscripciones activas relacionadas
        total_canciones:
          type: integer
          example: 45
          description: Total de canciones del artista en la discográfica
        promedio_reproducciones:
          type: number
          format: decimal
          example: 125000.50
          description: Promedio de reproducciones por canción

    # ==================== SCHEMAS AUXILIARES ====================
    Pagination:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 150
        pages:
          type: integer
          example: 8

    Error:
    SuscripcionResponse:
      type: object
      properties:
        id_suscripcion: { type: integer, example: 1 }
        id_usuario: { type: integer, example: 5 }
        fecha_inicio: { type: string, format: date, example: '2025-01-01' }
        fecha_renovacion: { type: string, format: date, example: '2025-02-01' }

    SuscripcionesListResponse:
      type: object
      properties:
        mensaje: { type: string }
        suscripciones:
          type: array
          items: { $ref: '#/components/schemas/SuscripcionResponse' }

    SuscripcionCreate:
      type: object
      required: [id_usuario, fecha_inicio, fecha_renovacion]
      properties:
        id_usuario: { type: integer }
        fecha_inicio: { type: string, format: date }
        fecha_renovacion: { type: string, format: date }

    SuscripcionCreateResponse:
      type: object
      properties:
        mensaje: { type: string }
        suscripcion: { $ref: '#/components/schemas/SuscripcionResponse' }

    SuscripcionGetResponse:
      type: object
      properties:
        mensaje: { type: string }
        suscripcion: { $ref: '#/components/schemas/SuscripcionResponse' }

    MetodoPagoResponse:
      type: object
      properties:
        id_datos_pago: { type: integer, example: 10 }
        id_usuario: { type: integer, example: 5 }
        id_tipo_forma_pago: { type: integer, example: 2 }
        cbu: { type: string, nullable: true }
        nro_tarjeta: { type: string, example: '**** **** **** 1234', nullable: true }
        mes_caduca: { type: integer, nullable: true }
        anio_caduca: { type: integer, nullable: true }

    MetodosPagoListResponse:
      type: object
      properties:
        mensaje: { type: string }
        metodos:
          type: array
          items: { $ref: '#/components/schemas/MetodoPagoResponse' }

    MetodoPagoCreate:
      type: object
      required: [id_usuario, id_tipo_forma_pago]
      properties:
        id_usuario: { type: integer }
        id_tipo_forma_pago: { type: integer }
        nro_tarjeta: { type: string }
        cbu: { type: string }
        mes_caduca: { type: integer }
        anio_caduca: { type: integer }

    MetodoPagoCreateResponse:
      type: object
      properties:
        mensaje: { type: string }
        metodoPago: { $ref: '#/components/schemas/MetodoPagoResponse' }

    PagoResponse:
      type: object
      properties:
        id_pago: { type: integer, example: 100 }
        id_suscripcion: { type: integer }
        fecha_pago: { type: string, format: date }
        importe: { type: number, format: decimal }
        id_datos_pago: { type: integer }

    PagosListResponse:
      type: object
      properties:
        mensaje: { type: string }
        pagos:
          type: array
          items: { $ref: '#/components/schemas/PagoResponse' }

    PagoCreate:
      type: object
      required: [id_suscripcion, id_datos_pago, fecha_pago, importe]
      properties:
        id_suscripcion: { type: integer }
        id_datos_pago: { type: integer }
        fecha_pago: { type: string, format: date }
        importe: { type: number, format: decimal }

    PagoCreateResponse:
      type: object
      properties:
        mensaje: { type: string }
        pago: { $ref: '#/components/schemas/PagoResponse' }

  # ==================== RESPUESTAS REUTILIZABLES ====================
  responses:
    BadRequest:
      description: Solicitud inválida
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: VALIDATION_ERROR
              message: Datos de entrada inválidos
              details: ["El email es obligatorio", "La contraseña debe tener al menos 8 caracteres"]

    Conflict:
      description: Conflicto - Recurso duplicado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: DUPLICATE_ENTRY
              message: El registro ya existe
              details: El email ya está registrado

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: NOT_FOUND
              message: Recurso no encontrado
              details: El usuario especificado no existe

    InternalServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: INTERNAL_SERVER_ERROR
              message: Error interno del servidor
              details: Error interno

  # ==================== SEGURIDAD ====================
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        Token JWT para autenticación (implementación opcional).
        
        Ejemplo de uso:
        ```
        Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        ```

# Aplicar seguridad globalmente (opcional)
# security:
#   - BearerAuth: []
